{"name":"Passwd","tagline":"Password utilities.","body":"## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'passwd'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install passwd\r\n\r\n## Usage\r\n\r\n```ruby\r\nrequire 'passwd'\r\n```\r\n\r\n### Create random password\r\n\r\n```ruby\r\npassword = Passwd.create\r\n```\r\n\r\n### Hashing password\r\n\r\nHashing with SHA1.\r\n\r\n```ruby\r\npassword_hash = Passwd.hashing(password)\r\n```\r\n\r\n### Password settings\r\n\r\nDefault config is stored in the class instance variable.\r\nChanging the default configs are as follows:\r\n\r\n```ruby\r\nPasswd.config # => Get config object.\r\nPasswd.config(length: 10) # => Change to the default length.\r\n\r\nPasswd.configure do |c|\r\n  c.length = 10\r\nend\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* :length => Number of characters. default is 8.\r\n* :lower => Skip lower case if set false. default is true.\r\n* :upper => Skip upper case if set false. default is true.\r\n* :number => Skip numbers if set false. default is true.\r\n* :letters_lower => Define an array of lower case. default is (\"a\"..\"z\").to_a\r\n* :letters_upper => Define an array of upper case. default is (\"A\"..\"Z\").to_a\r\n* :letters_number => Define an array of numbers. default is (\"0\"..\"9\").to_a\r\n\r\n### Policy check\r\n\r\nDefault policy is 8 more characters and require lower case and require number.\r\n\r\n```ruby\r\nPasswd.policy_check(\"secret\") # => true or false\r\n```\r\n\r\n### Policy settings\r\n\r\n```ruby\r\nPasswd.policy_configure do |c|\r\n  c.min_length = 10\r\nend\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* :min_length => Number of minimum characters. default is 8.\r\n* :require_lower => Require lower case if set true. default is true.\r\n* :require_upper => Require upper case if set true. default is false.\r\n* :require_number => Require number if set true. default is true.\r\n\r\n### Password object\r\n\r\nDefault password is randomly generated.\r\nDefault salt is \"#{Time.now.to_s}\".\r\n\r\n```ruby\r\npassword = Passwd::Password.new\r\npassword.text # return text password.\r\npassword.salt_text # return text salt.\r\npassword.salt_hash # return hash salt.\r\npassword.hash # return hash password.\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* :password => Text password. default is random.\r\n* :salt_text => Text salt. default is #{Time.now.to_s}.\r\n\r\nPassword authenticate:\r\n\r\n```ruby\r\npassword = Passwd::Password.new\r\nPasswd.auth(password.text, password.salt_hash, password.hash) # => true\r\nPasswd.auth(\"invalid!!\", password.salt_hash, password.hash) # => false\r\n\r\npassword == password.text # => true\r\npassword == \"invalid!!\" # => false\r\n```\r\n\r\n## For ActiveRecord\r\n\r\n### User model\r\n\r\nInclude `Passwd::ActiveRecord` module and define id/salt/password column from `define_column` method.  \r\n`id` column is required uniqueness.\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  include Passwd::ActiveRecord\r\n  # if not specified arguments for define_column => {id: :email, salt: :salt, password: :password}\r\n  define_column id: :id_colname, salt: :salt_colname, password: :password_colname\r\n\r\n  ...\r\nend\r\n```\r\n\r\nAvailable following method by defining id/salt/password column.\r\n\r\n### Authentication\r\n\r\n`authenticate` method is available in both instance and class.  \r\nReturn the user object if the authentication successful.  \r\nReturn the nil if authentication fails or doesn't exists user.\r\n\r\n```ruby\r\nuser = User.authenticate(\"foo@example.com\", \"secret\") # => return user object or nil.\r\n\r\nif user\r\n  puts \"Hello #{user.name}!\"\r\nelse\r\n  puts \"Authentication failed\"\r\nend\r\n```\r\n\r\ninstance method is not required `id`.\r\n\r\n```ruby\r\nuser = User.find(params[:id])\r\nif user.authenticate(\"secret\") # => return true or false\r\n  puts \"Authentication is successful!\"\r\nelse\r\n  puts \"Authentication failed!\"\r\nend\r\n```\r\n\r\n### Change passowrd\r\n\r\n`set_password` method will be set random password.  \r\nReturn value is plain text password.  \r\nTo specify the password as an argument if you want to specify a password.  \r\n`salt` also set if salt is nil.\r\n\r\n```ruby\r\nuser = User.find(params[:id])\r\npassword_text = user.set_password\r\n\r\nif user.save\r\n  NoticeMailer.change_mail(user, password_text).deliver\r\nend\r\n```\r\n`update_password` method will be set new password if the authentication successful.  \r\nReturn the nil if authentication fails.  \r\nBut `update_password` method doesn't call `save` method.\r\n\r\n```ruby\r\n@user = User.find(params[:id])\r\n\r\nif Passwd.confirm_check(params[:new_pass], params[:new_pass_confirm])\r\n  if @user.update_password(old_pass, new_pass) && @user.save # => return new password(text) or false\r\n    NoticeMailer.change_mail(user, password_text).deliver\r\n  else\r\n    puts \"Authentication failed!\"\r\n  end\r\nelse\r\n  puts \"Password don't match!\"\r\nend\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}